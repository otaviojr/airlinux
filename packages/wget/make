#!/bin/bash

stage="$1"
destination="$2"
arch="$3"
cross_tools="$4"

#Include our common functions
. ./packages/common/functions

echo "Cross-Compiling curl for $arch at $destination - stage: $stage"

current_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

download_dir="$destination/packages"
destination_dir="$destination/dist"
package_dir="$download_dir/wget-1.18"

cd $download_dir
if [ ! -d "wget-1.18" ]; then
  wget http://ftp.gnu.org/gnu/wget/wget-1.18.tar.xz
  tar -xf wget-1.18.tar.xz
fi

cd $package_dir
if [ -f "done-$stage.lock" ]; then
  echo "Already done. Skiping..."
  exit 0
fi

if [ -d "build" ]; then
  rm -rf "build"
fi
mkdir "build"
cd "$package_dir/build"

target=$(get_target_for_arch $arch)
macro_target=$(get_macro_target_for_arch $arch)
prefix=$(get_prefix_for_arch $arch)
cflags=$(get_cflags_for_arch $arch)
distro=$(get_distro_name)

export CFLAGS="$cflags --sysroot=$destination_dir"

export PKG_CONFIG_PATH=$destination_dir/lib/pkgconfig
export PKG_CONFIG_SYSROOT_DIR=$destination_dir
export SYSROOT=$destination_dir

export CROSS_COMPILE=$prefix-
export PATH=$PATH:$cross_tools/dist/bin
export CC=$prefix-gcc
export AR=$prefix-ar
export AS=$prefix-as
export LD=$prefix-ld
export RANLIB=$prefix-ranlib

if [ "x$stage" == "xsystem" ]; then
  echo ../configure --prefix= --host=$target --with-ssl=openssl
  ../configure --prefix= --host=$target --with-ssl=openssl
  make
  make DESTDIR=$destination_dir install
fi

cd ..
touch "done-$stage.lock"
