#!/bin/bash

stage="$1"
destination="$2"
arch="$3"
cross_tools="$4"

#Include our common functions
. ./packages/common/functions

echo "Cross-Compiling libical for $arch at $destination - stage: $stage"

current_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

download_dir="$destination/packages"
destination_dir="$destination/dist"
package_dir="$download_dir/libical-2.0.0"

cd $download_dir
if [ ! -d "libical-2.0.0" ]; then
  wget https://github.com/libical/libical/releases/download/v2.0.0/libical-2.0.0.tar.gz
  tar -xf libical-2.0.0.tar.gz
fi

cd $package_dir
if [ -f "done-$stage.lock" ]; then
  echo "Already done. Skiping..."
  exit 0
fi

if [ -d "build" ]; then
  rm -rf "build"
fi
mkdir "build"
cd "$package_dir/build"

target=$(get_target_for_arch $arch)
macro_target=$(get_macro_target_for_arch $arch)
prefix=$(get_prefix_for_arch $arch)
cflags=$(get_cflags_for_arch $arch)
ldflags=$(get_ldflags_for_arch $arch)
distro=$(get_distro_name)

export CFLAGS="$cflags --sysroot=$destination_dir -I$destination_dir/include"
export CXXFLAGS="$cflags --sysroot=$destination_dir -I$destination_dir/include"
export LDFLAGS="$ldflags --sysroot=$destination_dir -L$destination_dir/lib"

export PKG_CONFIG_PATH=$destination_dir/lib/pkgconfig
export PKG_CONFIG_SYSROOT_DIR=$destination_dir
export CMAKE_SYSROOT=$destination_dir

sudo apt-get install cmake

if [ "x$stage" == "xsystem" ]; then
  export CROSS_COMPILE=$prefix-
  export PATH=$PATH:$cross_tools/dist/bin
  export CC=$prefix-gcc
  export CXX=$prefix-g++
  export AR=$prefix-ar
  export AS=$prefix-as
  export LD=$prefix-ld
  export RANLIB=$prefix-ranlib

  cmake -DCMAKE_INSTALL_PREFIX=/    \
        -DCMAKE_BUILD_TYPE=Release  \
        -DSHARED_ONLY=yes           \
        -DCMAKE_INSTALL_PREFIX=$destination_dir \
        .. &&
  make
  make install
fi

cd ..
touch "done-$stage.lock"
