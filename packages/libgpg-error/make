#!/bin/bash

stage="$1"
destination="$2"
arch="$3"
cross_tools="$4"

#Include our common functions
. ./packages/common/functions

echo "Cross-Compiling libgpg-error for $arch at $destination - stage: $stage"

current_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

download_dir="$destination/packages"
destination_dir="$destination/dist"
package_install_dir="$destination/deploy/packages/libgpg-error"
package_dir="$download_dir/libgpg-error-1.23"

cd $download_dir
if [ ! -d "libgpg-error-1.23" ]; then
  wget ftp://ftp.gnupg.org/gcrypt/libgpg-error/libgpg-error-1.23.tar.gz
  tar -xf libgpg-error-1.23.tar.gz
fi

cd $package_dir
if [ -f "done-$stage.lock" ]; then
  echo "Already done. Skiping..."
  exit 0
fi

target=$(get_target_for_arch $arch)
gtarget=$(get_generic_target_for_arch $arch)
macro_target=$(get_macro_target_for_arch $arch)
prefix=$(get_prefix_for_arch $arch)
cflags=$(get_cflags_for_arch $arch)
distro=$(get_distro_name)

export CFLAGS="$cflags --sysroot=$destination_dir -L$destination_dir/lib"
export LDFLAGS="--sysroot=$destination_dir -L$destination_dir/lib"
export CC=$prefix-gcc
export AR=$prefix-ar
export AS=$prefix-as
export LD=$prefix-ld
export RANLIB=$prefix-ranlib
#export LIBTOOL=$prefix-libtool
export CROSS_COMPILE=$prefix-
export PATH=$PATH:$cross_tools/dist/bin

if [ "x$stage" == "xsystem" ]; then
  make distclean

  echo "cp ./src/syscfg/lock-obj-pub.$gtarget.h ./src/syscfg/lock-obj-pub.$target.h"
  cp ./src/syscfg/lock-obj-pub.$gtarget.h ./src/syscfg/lock-obj-pub.$target.h

  echo ./configure --prefix= --host=$target --enable-threads=posix
  ./configure --prefix= --host=$target --enable-threads=posix
  make
  make DESTDIR=$destination_dir install
  make DESTDIR=$package_install_dir install  
fi

touch "done-$stage.lock"
