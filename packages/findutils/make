#!/bin/bash

stage="$1"
destination="$2"
arch="$3"
cross_tools="$4"

#Include our common functions
. ./packages/common/functions

echo "Cross-Compiling findutils for $arch at $destination - stage: $stage"

current_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

download_dir="$destination/packages"
destination_dir="$destination/dist"
package_install_dir="$destination/deploy/packages/findutils"
package_dir="$download_dir/findutils-4.6.0"

cd $download_dir
if [ ! -d "findutils-4.6.0" ]; then
  wget http://ftp.gnu.org/pub/gnu/findutils/findutils-4.6.0.tar.gz
  tar -xf findutils-4.6.0.tar.gz
fi

cd $package_dir
if [ -f "done-$stage.lock" ]; then
  echo "Already done. Skiping..."
  exit 0
fi

if [ -d "build" ]; then
  rm -rf "build"
fi
mkdir "build"
cd "$package_dir/build"

target=$(get_target_for_arch $arch)
macro_target=$(get_macro_target_for_arch $arch)
prefix=$(get_prefix_for_arch $arch)
cflags=$(get_cflags_for_arch $arch)
distro=$(get_distro_name)

export CFLAGS="$cflags --sysroot=$destination_dir"

if [ "x$stage" == "xsystem" ]; then
  export CROSS_COMPILE=$prefix-
  export PATH=$PATH:$cross_tools/dist/bin
  export CC=$prefix-gcc
  export AR=$prefix-ar
  export AS=$prefix-as
  export LD=$prefix-ld
  export RANLIB=$prefix-ranlib
  echo gl_cv_func_fflush_stdin=yes gl_cv_func_wcwidth_works=yes ../configure --prefix= --host=$target
  gl_cv_func_fflush_stdin=yes gl_cv_func_wcwidth_works=yes ../configure --prefix= --host=$target
  make
  make DESTDIR=$destination_dir install
  make DESTDIR=$package_install_dir install
fi

cd ..
touch "done-$stage.lock"
