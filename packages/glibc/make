#!/bin/bash

stage="$1"
destination="$2"
arch="$3"
cross_tools="$4"

#Include our common functions
. ./packages/common/functions

echo "Cross-Compiling glibc for $arch at $destination - stage: $stage"

current_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

download_dir="$destination/packages"
destination_dir="$destination/dist"
package_dir="$download_dir/glibc-2.23"

cd $download_dir
if [ ! -d "glibc-2.23" ]; then
  wget http://ftp.gnu.org/gnu/glibc/glibc-2.23.tar.xz
  tar -xf glibc-2.23.tar.xz
fi

cd $package_dir
if [ -f "done-$stage.lock" ]; then
  echo "Already done. Skiping..."
  exit 0
fi

if [ -d "build" ]; then
  rm -rf "build"
fi
mkdir "build"
cd "$package_dir/build"

target=$(get_target_for_arch $arch)
macro_target=$(get_macro_target_for_arch $arch)
prefix=$(get_prefix_for_arch $arch)
cflags=$(get_cflags_for_arch $arch)

distro=$(get_distro_name)

if [ "x$distro" == "xubuntu" ]; then
  sudo DEBIAN_FRONTEND=noninteractive apt-get -y --force-yes install gawk
else
  echo "Non debian platform not supported"
  exit 1
fi

export ARCH=$macro_target
export CROSS_COMPILE=$prefix-
export CFLAGS="$cflags -Wno-error=parentheses -Wno-error=attributes -Wno-error=int-to-pointer-cast -Wno-error=implicit-function-declaration"
export BUILD_CC=gcc
export CC=$prefix-gcc
export AR=$prefix-ar
export AS=$prefix-as
export RANLIB=$prefix-ranlib

if [ "x$stage" == "xstage1" ]; then
  export PATH=$PATH:$destination_dir/bin
  echo ../configure --prefix=/ --host=$target --with-headers=$destination_dir/include --enable-kernel=2.6.32 libc_cv_forced_unwind=yes libc_cv_c_cleanup=yes libc_cv_ctors_header=yes
  ../configure --prefix=/ --host=$target --with-headers=$destination_dir/include --enable-kernel=2.6.32 libc_cv_forced_unwind=yes libc_cv_c_cleanup=yes libc_cv_ctors_header=yes
  make
  make DESTDIR=$destination_dir install
elif [ "x$stage" == "xsystem" ]; then
  export PATH=$PATH:$cross_tools/dist/bin
  export CROSS_COMPILE=$prefix-
  echo ../configure --prefix=/ --host=$target --with-headers=$destination_dir/include --enable-kernel=2.6.32 libc_cv_forced_unwind=yes libc_cv_c_cleanup=yes libc_cv_ctors_header=yes
  ../configure --prefix=/ --host=$target --with-headers=$destination_dir/include --enable-kernel=2.6.32 libc_cv_forced_unwind=yes libc_cv_c_cleanup=yes libc_cv_ctors_header=yes
  make
  make DESTDIR=$destination_dir install
elif [ "x$stage" == "xconfigs" ]; then
  export current_dir
  export download_dir
  export destination_dir
  export arch
  $current_dir/config/$arch/make
fi

unset ARCH
unset CROSS_COMPILE
unset CFLAGS
unset CC
unset AR
unset AS
unset RANLIB

cd ..
touch "done-$stage.lock"
