#!/bin/bash

stage="$1"
destination="$2"
arch="$3"

#Include our common functions
. ./packages/common/functions

echo "Cross-Compiling Pi-Kernel for $arch at $destination - stage: $stage"

current_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

download_dir="$destination/packages"
destination_dir="$destination/dist"
package_install_dir="$destination/deploy/packages/pikernel"
cross_tools="$4"

cd $download_dir
if [ ! -d "pikernel" ]; then
  #git clone -b rpi-4.4.y https://github.com/raspberrypi/linux.git pikernel
  git clone -b rpi-4.7.y https://github.com/raspberrypi/linux.git pikernel
  #git clone https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git pikernel
fi

cd "$download_dir/pikernel"
if [ -f "done-$stage.lock" ]; then
  echo "Already done. Skiping..."
  exit 0
fi

#Only for linux-next repository - not working yet
#git remote add linux-next https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git
#git fetch linux-next
#git checkout v4.7-rc7
#patch -p1 -N -i $current_dir/patches/rpi3.patch

patch -p1 -N -i $current_dir/patches/bcm2709_defconfig.patch
patch -p1 -N -i $current_dir/patches/fbmen.patch

macro_target=$(get_macro_target_for_arch $arch)
target=$(get_target_for_arch $arch)
prefix=$(get_prefix_for_arch $arch)

if [ "x$arch" == "xrpi3" ]; then
  config="bcm2709_defconfig"
else
  echo "Unsupported architecture"
fi

if [ "x$stage" == "xheaders" ]; then
  export PATH=$PATH:$destination/dist/bin
  export KERNEL=kernel7
  make distclean
  make ARCH=$macro_target CROSS_COMPILE=$prefix- $config
  make ARCH=$macro_target CROSS_COMPILE=$prefix- INSTALL_HDR_PATH=$destination_dir/ headers_install
elif [ "x$stage" == "xfull" ]; then
  export PATH=$PATH:$cross_tools/dist/bin
  export KERNEL=kernel7
  make distclean
  echo "make ARCH=$macro_target CROSS_COMPILE=$prefix- $config"
  make ARCH=$macro_target CROSS_COMPILE=$prefix- $config
  echo "make ARCH=$macro_target CROSS_COMPILE=$prefix- INSTALL_HDR_PATH=$destination_dir/ headers_install"
  make ARCH=$macro_target CROSS_COMPILE=$prefix- INSTALL_HDR_PATH=$destination_dir/ headers_install
  make ARCH=$macro_target CROSS_COMPILE=$prefix- INSTALL_HDR_PATH=$package_install_dir/ headers_install
  echo "make ARCH=$macro_target CROSS_COMPILE=$prefix- zImage modules dtbs"
  make ARCH=$macro_target CROSS_COMPILE=$prefix- zImage modules dtbs
  echo "make ARCH=$macro_target CROSS_COMPILE=$prefix- modules_install"
  make ARCH=$macro_target CROSS_COMPILE=$prefix- INSTALL_MOD_PATH=$destination_dir modules_install
  make ARCH=$macro_target CROSS_COMPILE=$prefix- INSTALL_MOD_PATH=$package_install_dir modules_install

  ##
  # System
  ##

  #only to linux-next
  #mkdir -p $destination_dir/boot/dtbs
  #cp ./arch/arm/boot/dts/*.dtb $destination_dir/boot/dtbs
  #cp ./arch/arm/boot/compressed/vmlinux $destination_dir/boot/

  #only to raspberrypi/linux image
  mkdir -p $destination_dir/boot/overlays/
  cp ./arch/arm/boot/dts/overlays/*.dtb* $destination_dir/boot/overlays
  cp ./arch/arm/boot/dts/*.dtb $destination_dir/boot
  sudo ./scripts/mkknlimg arch/arm/boot/zImage $destination_dir/boot/$KERNEL.img

  #to anyone of them
  cp -Rf $current_dir/config/boot/* $destination_dir/boot/
  rm $destination_dir/boot/config.txt
  mv $destination_dir/boot/config_rpi3.txt $destination_dir/boot/config.txt


  ##
  # Package
  ##

  #only to linux-next
  #mkdir -p $destination_dir/boot/dtbs
  #cp ./arch/arm/boot/dts/*.dtb $destination_dir/boot/dtbs
  #cp ./arch/arm/boot/compressed/vmlinux $destination_dir/boot/

  #only to raspberrypi/linux image
  mkdir -p $package_install_dir/boot/overlays/
  cp ./arch/arm/boot/dts/overlays/*.dtb* $package_install_dir/boot/overlays
  cp ./arch/arm/boot/dts/*.dtb $package_install_dir/boot
  sudo ./scripts/mkknlimg arch/arm/boot/zImage $package_install_dir/boot/$KERNEL.img

  #to anyone of them
  cp -Rf $current_dir/config/boot/* $package_install_dir/boot/
  rm $package_install_dir/boot/config.txt
  mv $package_install_dir/boot/config_rpi3.txt $package_install_dir/boot/config.txt
fi

touch "done-$stage.lock"
