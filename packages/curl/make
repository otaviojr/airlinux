#!/bin/bash

stage="$1"
destination="$2"
arch="$3"
cross_tools="$4"

#Include our common functions
. ./packages/common/functions

echo "Cross-Compiling curl for $arch at $destination - stage: $stage"

current_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

download_dir="$destination/packages"
destination_dir="$destination/dist"
package_install_dir="$destination/deploy/packages/curl"
package_dir="$download_dir/curl-7.49.1"

cd $download_dir
if [ ! -d "curl-7.49.1" ]; then
  wget https://curl.haxx.se/download/curl-7.49.1.tar.gz
  tar -xf curl-7.49.1.tar.gz
fi

cd $package_dir
if [ -f "done-$stage.lock" ]; then
  echo "Already done. Skiping..."
  exit 0
fi

if [ -d "build" ]; then
  rm -rf "build"
fi
mkdir "build"
cd "$package_dir/build"

target=$(get_target_for_arch $arch)
macro_target=$(get_macro_target_for_arch $arch)
prefix=$(get_prefix_for_arch $arch)
cflags=$(get_cflags_for_arch $arch)
distro=$(get_distro_name)

export CFLAGS="$cflags --sysroot=$destination_dir"

if [ "x$stage" == "xsystem" ]; then
  export CROSS_COMPILE=$prefix-
  export PATH=$PATH:$cross_tools/dist/bin
  export CC=$prefix-gcc
  export AR=$prefix-ar
  export AS=$prefix-as
  export LD=$prefix-ld
  export RANLIB=$prefix-ranlib

  echo ../configure --prefix= --host=$target --with-ca-path=/etc/ssl/certs --with-ssl
  ../configure --prefix= --host=$target --with-ca-path=/etc/ssl/certs --with-ssl
  make
  make DESTDIR=$destination_dir install
  make DESTDIR=$package_install_dir install
fi

cd ..
touch "done-$stage.lock"
