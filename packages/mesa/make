#!/bin/bash

stage="$1"
destination="$2"
arch="$3"
cross_tools="$4"

#Include our common functions
. ./packages/common/functions

echo "Cross-Compiling mesa for $arch at $destination - stage: $stage"

current_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

download_dir="$destination/packages"
destination_dir="$destination/dist"
package_install_dir="$destination/deploy/packages/mesa"
package_dir="$download_dir/mesa-11.2.2"

cd $download_dir
if [ ! -d "mesa-11.2.2" ]; then
  wget https://mesa.freedesktop.org/archive/11.2.2/mesa-11.2.2.tar.xz
  tar -xf mesa-11.2.2.tar.xz
fi

cd $package_dir
if [ -f "done-$stage.lock" ]; then
  echo "Already done. Skiping..."
  exit 0
fi

patch -p1 -N -i $current_dir/patches/Makefile.am.patch
patch -p1 -N -i $current_dir/patches/pci_id_driver_map.c.patch
./autogen.sh

if [ -d "build" ]; then
  rm -rf "build"
fi
mkdir "build"
cd "$package_dir/build"

target=$(get_target_for_arch $arch)
macro_target=$(get_macro_target_for_arch $arch)
prefix=$(get_prefix_for_arch $arch)
cflags=$(get_cflags_for_arch $arch)
distro=$(get_distro_name)

export CFLAGS="$cflags --sysroot=$destination_dir -I$destination_dir/include"
export CXXFLAGS="$cflags --sysroot=$destination_dir -I$destination_dir/include"
export LDFLAGS="--sysroot=$destination_dir -L$destination_dir/lib"

export PKG_CONFIG_PATH=$destination_dir/lib/pkgconfig
export PKG_CONFIG_SYSROOT_DIR=$destination_dir
export SYSROOT=$destination_dir

export CC=$prefix-gcc
export CXX=$prefix-g++
export AR=$prefix-ar
export AS=$prefix-as
export LD=$prefix-ld
export CXXLD=$prefix-ld
export RANLIB=$prefix-ranlib

export CROSS_COMPILE=$prefix-
export PATH=$PATH:$cross_tools/dist/bin:/tmp/wayland/bin

if [ "x$stage" == "xsystem" ]; then
  if ["x$arch" == "xrpi3" ]; then
    echo ../configure --prefix=/ --host=$target --with-gallium-drivers=vc4 --with-egl-platforms='drm' --without-dri-drivers --enable-gbm --disable-gles1 --enable-gles2
    ../configure --prefix=/ --host=$target --with-gallium-drivers=vc4 --with-egl-platforms='drm' --without-dri-drivers --enable-gbm --disable-gles1 --enable-gles2
    make
    make DESTDIR=$destination_dir install
  else
    echo "Unsupported architecture"
  fi
elif [ "x$stage" == "xsystem-wayland" ]; then
  if ["x$arch" == "xrpi3" ]; then
    echo ../configure --prefix=/ --host=$target --with-gallium-drivers=vc4 --with-egl-platforms='wayland drm' --without-dri-drivers --enable-gbm --disable-gles1 --enable-gles2
    ../configure --prefix=/ --host=$target --with-gallium-drivers=vc4 --with-egl-platforms='wayland drm' --without-dri-drivers --enable-gbm --disable-gles1 --enable-gles2
    make LIBTOOL=$prefix-libtool
    make LIBTOOL=$prefix-libtool DESTDIR=$destination_dir install
    make LIBTOOL=$prefix-libtool DESTDIR=$package_install_dir install
  else
    echo "Unsupported architecture"
  fi
fi

cd ..
touch "done-$stage.lock"
